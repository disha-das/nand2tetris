// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
	And16(a=true, b=instruction, out[15]=T);
	And16(a=true, b=instruction, out[12]=a);
	And16(a=true, b=instruction, out[11]=c1);
	And16(a=true, b=instruction, out[10]=c2);
	And16(a=true, b=instruction, out[9]=c3);
	And16(a=true, b=instruction, out[8]=c4);
	And16(a=true, b=instruction, out[7]=c5);
	And16(a=true, b=instruction, out[6]=c6);
	And16(a=true, b=instruction, out[5]=d1);
	And16(a=true, b=instruction, out[4]=d2);
	And16(a=true, b=instruction, out[3]=d3);
	And16(a=true, b=instruction, out[2]=j1);
	And16(a=true, b=instruction, out[1]=j2);
	And16(a=true, b=instruction, out[0]=j3);
	And16(a=true, b=instruction, out[0..14]=ainstvalue);
	
	Mux16(a[0..14]=ainstvalue, b=aluout1, sel=T, out=Avalue);
	
	Not(in=T, out=NotofT);
	Or(a=NotofT, b=d1, out=notTord1);
	ARegister(in=Avalue, load=notTord1, out=RegA);
	
	And(a=T, b=d2, out=Tandd2);
	DRegister(in=aluout1, load=Tandd2, out=RegD);
	
	Mux16(a=RegA, b=inM, sel=a, out=AorM);
	
	ALU(x=RegD, y=AorM, zx=c1, nx=c2, zy= c3, ny=c4, f=c5, no=c6, out=aluout1, zr=zr, ng=ng);
    And16(a=true, b=aluout1, out=outM);

	And(a=T, b=d3, out=writeM);
	And16(a=true, b=RegA, out[0..14]=addressM);
	
	
	And(a=j2, b=zr, out=j2andzr);
	
	And(a=j1, b=ng, out=j1andng);
	
	Not(in=zr, out=notzr);
	Not(in=ng, out=notng);
	And(a=j3, b=notzr, out=j3andnotzr);
	And(a=notng, b=j3andnotzr, out=j3andnotzrandnotng);
	
	And(a=j1, b=j2, out=j1andj2);
	And(a=j1andj2, b=j3, out=j1andj2andj3);
	
	Or(a=j2andzr, b=j1andng, out=or1);
	Or(a=j3andnotzrandnotng, b=j1andj2andj3, out=or2);
	Or(a=or1, b=or2, out=orload);
	
	And(a=orload, b=T, out=load);
	
	Not(in=load, out=inc);
	
	PC(in=RegA, load=load, inc=inc, reset=reset, out[0..14]=pc);
}